#+title: üê∂ dogfiles ‚ùÑ
#+description: nixos dotfiles
#+author: chu

a work in progress! not a good idea to install right now!

* configuration
#+begin_src nix :tangle ./configuration.nix
{ config, inputs, lib, pkgs, callPackage, ... }:

{
  imports = [
    # Include the results of the hardware scan.
    ./hardware-configuration.nix # hardware config
  ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "nixos"; # Define your hostname.

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "America/Chicago";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  # Configure keymap in X11
  services.xserver.xkb = { layout = "us"; };

  # For if NixOS is a VM guest:
  services = {
    qemuGuest.enable = true;
    spice-vdagentd.enable = true;
    # host requires org.qemu.guest_agent.0 virtio serial port.
  };

  # Define a user account. Don't forget to set a password with ‚Äòpasswd‚Äô.
  users.users.chu = {
    isNormalUser = true;
    description = "chu";
    extraGroups = [ "networkmanager" "wheel" ];
    # open.ssh.authorizedKeys.keys = [ "ssh-dss AAAB3Nza... user@blahblah" ];
    # packages = with pkgs; [ ];
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    neovim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    wget
    git
    killall
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  programs.mtr.enable = true;
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
  };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;
  services.openssh.settings.PermitRootLogin = "yes"; # Unsafe

  system.stateVersion = "24.11"; # Did you read the comment?

  nix.settings.experimental-features = [ "nix-command" "flakes" ];
  nix.settings.trusted-users = [ "root" "chu" ];

  # Zsh; which needs to be enabled in your home.nix.
  programs.zsh.enable = true;
  users.defaultUserShell = pkgs.zsh;

  # X11
  services.xserver = {
    enable = true;
    windowManager = {
      dwm.package = pkgs.dwm.overrideAttrs {
        src = pkgs.fetchFromGitHub {
          owner = "chumutt";
          repo = "dwm";
          rev = "main";
          sha256 = "P9ecPUWfdwW1MYFzWTifxIJyTZQDFCkfoV3HVheRte8=";
        };
      };
      dwm.enable = true;
    };
    autorun = false;
    displayManager.startx.enable = true; # use startx command to start x server
  };
  # X11 compositor
  services.picom = {
    enable = true;
    fade = true;
    inactiveOpacity = 0.9;
    shadow = true;
    fadeDelta = 4;
  };

  services.pipewire = {
    enable = true;
    wireplumber.enable = true;
    alsa.enable = true;
    audio.enable = true;
    jack.enable = true;
    pulse.enable = true;
  };

}
#+end_src
* flake
#+begin_src nix :tangle ./flake.nix
{
  description = "chunixos";

  inputs = {

    # nixpkgs.url = "github:nixos/nixpkgs/nixos-24.05";
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nixpkgs-unstable.url = "nixpkgs/nixos-unstable";

    home-manager = {
      url = "github:nix-community/home-manager/master";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    emacs-overlay = {
      url = "github:nix-community/emacs-overlay";
      inputs = {
        nixpkgs.follows = "nixpkgs-unstable";
        nixpkgs-stable.follows = "nixpkgs";
      };
    };
    nixos-hardware.url = "github:nixos/nixos-hardware";

  };

  outputs = { self, nixpkgs, home-manager, ... }:
    let
      lib = nixpkgs.lib;
      system = "x86_64-linux";
      pkgs = nixpkgs.legacyPackages.${system};
    in {
      nixosConfigurations = {
        nixos = lib.nixosSystem { # change "nixos" to your username
          inherit system;
          modules = [ ./configuration.nix ];
        };
      };
      homeConfigurations = {
        chu = home-manager.lib.homeManagerConfiguration {
          inherit pkgs;
          modules = [ ./home.nix ];
        };
      };
    };

}
#+end_src
* home.nix
#+begin_src nix :tangle ./home.nix
{ config, pkgs, ... }: {
  imports = [ ./shells.nix ]; # Do not rename to shell.nix: filename reserved.
  home = {
    username = "chu";
    homeDirectory = "/home/chu";
    stateVersion = "24.05"; # Please read the comment before changing.

    packages = with pkgs; [
      cachix
      man-db
      zsh
      tldr
      bc
      rsync
      ffmpeg
      yt-dlp
      fontconfig
      dmenu
      (dwmblocks.overrideAttrs {
        src = pkgs.fetchFromGitHub {
          owner = "chumutt";
          repo = "dwmblocks";
          rev = "main";
          sha256 = "KTW2fUWiWJjyHbpEbnaEq3wcuncn4fM5xk1o8CpEdOE=";
        };
      }) # TODO add missing sb-* scripts
      st
      arandr
      xwallpaper
      dunst
      pywal # the new wal
      pavucontrol
      raysession

      # Doom Emacs stack
      fd
      (ripgrep.override { withPCRE2 = true; })
      nixfmt-rfc-style # :lang nix
      emacs-all-the-icons-fonts
      (nerdfonts.override { fonts = [ "FiraCode" ]; }) # doom emacs default font
      gnumake
      cmake
      gcc
      libtool

      librewolf
      thunderbird
      nextcloud-client
    ];

    file = { ".xinitrc".source = ./x11/xinitrc; };

    sessionVariables = {
      EDITOR = "neovim";
      TERMINAL = "st";
      TERMINAL_PROG = "st";
      VISUAL = "emacs";
      BROWSER = "librewolf";
      DOOMDIR = "${config.xdg.configHome}/doom";
      EMACSDIR = "${config.xdg.configHome}/emacs";
      DOOMLOCALDIR = "${config.xdg.dataHome}/doom";
      DOOMPROFILELOADFILE = "${config.xdg.stateHome}/doom-profiles-load.el";
    };

    sessionPath =
      [ "${config.xdg.configHome}/emacs/bin" ]; # ./doom sync, upgrade etc

  };

  programs = {
    # Let Home Manager install and manage itself.
    home-manager.enable = true;
    zsh.enable = true;
    # Emacs
    emacs = { enable = true; };

    git = {
      enable = true;
      userName = "chumutt";
      userEmail = "chufilthymutt@gmail.com";
      extraConfig = { init.defaultBranch = "main"; };
    };
  };

  # thanks j4m3s
  systemd.user.sessionVariables = {
    DOOMLOCALDIR = "$HOME/.local/share/doomemacs";
    DOOMPROFILELOADFILE = "$HOME/.local/share/doomemacs/profiles/load.el";
  };

  # emacs daemon (emacsclient) service
  services.emacs.enable = true;

  # Autoload fonts from packages installed via Home Manager
  fonts.fontconfig.enable = true;

}
#+end_src
* shells.nix
#+begin_src nix :tangle ./shells.nix
{ config, lib, pkgs, ... }:

let
  myShellAliases = {
    supdate = "sudo nixos-rebuild switch --flake ~/.dotfiles";
    hupdate = "home-manager switch --flake ~/.dotfiles";
    update = "supdate && hupdate";

    cp = "cp -iv";
    mv = "mv -iv";
    rm = "rm -vI";
    bc = "bc -ql";
    rsync = "rsync -vrPlu";
    mkd = "mkdir -pv";
    yt = "yt-dlp --embed-metadata -i";
    yta = "yt -x -f bestaudio/best";
    ytt = "yt --skip-download --write-thumbnail";
    ffmpeg = "ffmpeg -hide_banner";
    lsblk = "lsblk --output NAME,LABEL,TRAN,TYPE,SIZE,FSUSED,FSTYPE,MOUNTPOINT";

    # Colorize commands when possible.
    ls = "ls -hN --color=auto --group-directories-first";
    grep = "grep --color=auto";
    diff = "diff --color=auto";
    ccat = "highlight --out-format=ansi";
    ip = "ip -color=auto";
  };
in {
  # Zsh; which is also enabled system-wide in /etc/nixos/configuration.nix,
  # as otherwise it wouldn't be able to source necessary files.
  programs.zsh = {
    enable = true;
    enableCompletion = true;
    autosuggestion.enable = true;
    syntaxHighlighting.enable = true;
    autocd = true;

    shellAliases = myShellAliases;

    history = {
      size = 10000;
      path = "${config.xdg.dataHome}/zsh/history";
    };

  };

  programs.bash = {
    enable = true;
    shellAliases = myShellAliases;
  };

}
#+end_src
* x11
** xinitrc
#+begin_src :tangle ./x11/xinitrc :mkdirp t
dwm
#+end_src
