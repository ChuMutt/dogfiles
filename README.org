#+title: üê∂‚ùÑ dogfiles ‚ùÑüê∂
#+description: nixos dotfiles
#+author: chu the pup

#+begin_export html
<p align="center">

<a href="https://github.com/nixos/nixpkgs"><img src="https://img.shields.io/badge/NixOS-24.05-royalblue.svg?style=for-the-badge&logo=nixos&labelColor=black"></a>

<a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-literate%20config-seagreen?style=for-the-badge&logo=org&labelColor=black"></a>

<a href="https://www.gnu.org/software/emacs/emacs.html#Releases"><img src="https://img.shields.io/badge/Emacs-29.4-blueviolet.svg?style=for-the-badge&logo=GNU%20Emacs&labelColor=black"></a>

<a href="https://github.com/doomemacs"><img src="https://img.shields.io/badge/Made_with-Doom_Emacs-blueviolet.svg?style=flat-square&logo=GNU%20Emacs&logoColor=black"></a>

</p>
#+end_export

work in progress! ‚ö†‚ú®not a good idea to install right now!‚ú®‚ö†

* credits

- [[https://github.com/hlissner/dotfiles/commits?author=hlissner][hlissner/dotfiles]]
- [[https://github.com/idlip/d-nix][idlip/d-nix]]

* installation

+ Acquire or build a NixOS 24.05+ image:

#+begin_src sh :noeval t
# Yoink nixos-unstable from upstream
wget -O nixos.iso https://channels.nixos.org/nixos-unstable/latest-nixos-minimal-x86_64-linux.iso
#+end_src

+ Write it to a USB drive:

#+begin_src sh :noeval t
# Replace /dev/sdX with the correct partition!
cp nixos.iso /dev/sdX
#+end_src

+ Restart and boot into the installer.

+ Do your partitions and mount your root to =/mnt=  ([[https://github.com/hlissner/dotfiles/blob/master/hosts/udon/README.org][for example]]).

+ Clone these dotfiles somewhere:

#+begin_src sh :noeval t
git clone --recursive https://github.com/chumutt/dogfiles
#+end_src

+ Create a host config in =hosts/= (see [[https://github.com/hlissner/dotfiles/blob/master/hosts][existing ones]] for examples).

+ Run the installer:

#+begin_src sh :noeval t
# The options are optional, but these are their default values, if you omit them.
dotfiles/install.zsh \
      --root /mnt \
      --flake /mnt/etc/dotfiles \
      --user "$USER" \
      --host "$HOST" \
      --dest /mnt/home/$USER/.config/dotfiles
#+end_src

+ Then reboot and you're good to go!

‚ö† *WARNING* ‚ö†

*Don't forget to change your `root` and `$USER` passwords!* They are set to `nixos` by default.

** the installer

Deploy and install this nixos system.

#+name: installer
#+begin_src sh :shebang #!/usr/bin/env zsh :tangle ./install.zsh :noeval t
zparseopts -E -F -D -- -flake=flake \
                       -user=user \
                       -host=host \
                       -dest=dest \
                       -root=root || exit 1

local root="${root[2]:-/mnt}"
local flake="${flake[2]:-$root/etc/dotfiles}"
local host="${host[2]:-$HOST}"
local user="${user[2]:-chu}"
local dest="${dest[2]:-$root/home/$user/.config/dotfiles}"

if [[ "$USER" == nixos ]]; then
  >&2 echo "Error: not in the nixos installer"
  exit 1
elif [[ -z "$host" ]]; then
  >&2 echo "Error: no --host set"
  exit 2
fi

set -e
if [[ ! -d "$flake" ]]; then
  local url=https://github.com/chumutt/dogfiles
  [[ "$user" == chu ]] && url="git@github.com:chumutt/dogfiles.git"
  rm -rf "$flake"
  git clone --recursive "$url" "$flake"
  chown "$user:users" -R "$flake"
fi

# export HEYENV="{\"user\":\"$user\",\"host\":\"$host\",\"path\":\"${flake#$root}\",\"theme\":\"$THEME\"}"
nixos-install \
    --impure \
    --show-trace \
    --root "$root" \
    --flake "${flake}#${host}"
#+end_src

* configuration

#+begin_src nix :tangle ./configuration.nix
{ config, inputs, lib, pkgs, callPackage, ... }:

{
  imports = [
    # Include the results of the hardware scan.
    ./hardware-configuration.nix # hardware config
  ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "nixos"; # Define your hostname.

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "America/Chicago";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  # Configure keymap in X11
  services.xserver.xkb = { layout = "us"; };

  # For if NixOS is a VM guest:
  services = {
    qemuGuest.enable = true;
    spice-vdagentd.enable = true;
    # host requires org.qemu.guest_agent.0 virtio serial port.
  };

  # Define a user account. Don't forget to set a password with ‚Äòpasswd‚Äô.
  users.users.chu = {
    isNormalUser = true;
    description = "chu";
    extraGroups = [ "networkmanager" "wheel" ];
    # open.ssh.authorizedKeys.keys = [ "ssh-dss AAAB3Nza... user@blahblah" ];
    # packages = with pkgs; [ ];
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    neovim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    wget
    git
    killall
    librewolf
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  programs.mtr.enable = true;
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
  };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;
  services.openssh.settings.PermitRootLogin = "yes"; # Unsafe

  system.stateVersion = "24.11"; # Did you read the comment?

  nix.settings.experimental-features = [ "nix-command" "flakes" ];
  nix.settings.trusted-users = [ "root" "chu" ];

  # Zsh; which needs to be enabled in your home.nix.
  programs.zsh.enable = true;
  users.defaultUserShell = pkgs.zsh;

  # X11
  services.xserver = {
    enable = true;
    windowManager = {
      dwm.package = pkgs.dwm.overrideAttrs {
        src = pkgs.fetchFromGitHub {
          owner = "chumutt";
          repo = "dwm";
          rev = "main";
          sha256 = "P9ecPUWfdwW1MYFzWTifxIJyTZQDFCkfoV3HVheRte8=";
        };
      };
      dwm.enable = true;
    };
    autorun = false;
    displayManager.startx.enable = true; # use startx command to start x server
  };
  # X11 compositor
  services.picom = {
    enable = true;
    fade = true;
    inactiveOpacity = 0.9;
    shadow = true;
    fadeDelta = 4;
  };

  services.pipewire = {
    enable = true;
    wireplumber.enable = true;
    alsa.enable = true;
    audio.enable = true;
    jack.enable = true;
    pulse.enable = true;
  };

}
#+end_src

* flake.nix

#+begin_src nix :tangle ./flake.nix
{
  description = "chunixos";

  inputs = {

    # nixpkgs.url = "github:nixos/nixpkgs/nixos-24.05";
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nixpkgs-unstable.url = "nixpkgs/nixos-unstable";

    home-manager = {
      url = "github:nix-community/home-manager/master";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    emacs-overlay = {
      url = "github:nix-community/emacs-overlay";
      inputs = {
        nixpkgs.follows = "nixpkgs-unstable";
        nixpkgs-stable.follows = "nixpkgs";
      };
    };
    nixos-hardware.url = "github:nixos/nixos-hardware";

  };

  outputs = { self, nixpkgs, home-manager, ... }:
    let
      lib = nixpkgs.lib;
      system = "x86_64-linux";
      pkgs = nixpkgs.legacyPackages.${system};
    in {
      nixosConfigurations = {
        nixos = lib.nixosSystem { # change "nixos" to your username
          inherit system;
          modules = [ ./configuration.nix ];
        };
      };
      homeConfigurations = {
        chu = home-manager.lib.homeManagerConfiguration {
          inherit pkgs;
          modules = [ ./home.nix ];
        };
      };
    };

}
#+end_src

* home.nix

#+begin_src nix :tangle ./home.nix
{ config, pkgs, ... }: {
  imports = [ ./shells.nix ]; # Do not rename to shell.nix: filename reserved.
  home = {
    username = "chu";
    homeDirectory = "/home/chu";
    stateVersion = "24.05";

    packages = with pkgs; [
      cachix
      man-db
      zsh
      tldr
      bc
      rsync
      ffmpeg
      yt-dlp
      fontconfig
      dmenu
      (dwmblocks.overrideAttrs {
        src = pkgs.fetchFromGitHub {
          owner = "chumutt";
          repo = "dwmblocks";
          rev = "main";
          sha256 = "KTW2fUWiWJjyHbpEbnaEq3wcuncn4fM5xk1o8CpEdOE=";
        };
      }) # TODO add missing sb-* scripts
      st
      arandr
      xwallpaper
      dunst
      pywal # the new wal
      pavucontrol
      raysession

      # Doom Emacs stack
      fd
      (ripgrep.override { withPCRE2 = true; })
      nixfmt-rfc-style # :lang nix
      emacs-all-the-icons-fonts
      (nerdfonts.override { fonts = [ "FiraCode" ]; }) # doom emacs default font
      gnumake
      cmake
      gcc
      libtool

      thunderbird
      nextcloud-client
    ];

    file = { ".xinitrc".source = ./x11/xinitrc; };

    sessionVariables = {
      EDITOR = "neovim";
      TERMINAL = "st";
      TERMINAL_PROG = "st";
      VISUAL = "emacs";
      BROWSER = "librewolf";
      DOOMDIR = "${config.xdg.configHome}/doom";
      EMACSDIR = "${config.xdg.configHome}/emacs";
      DOOMLOCALDIR = "${config.xdg.dataHome}/doom";
      DOOMPROFILELOADFILE = "${config.xdg.stateHome}/doom-profiles-load.el";
    };

    sessionPath =
      [ "${config.xdg.configHome}/emacs/bin" ]; # ./doom sync, upgrade etc

  };

  programs = {
    # Let Home Manager install and manage itself.
    home-manager.enable = true;
    zsh.enable = true;
    # Emacs
    emacs = { enable = true; };

    git = {
      enable = true;
      userName = "chumutt";
      userEmail = "chufilthymutt@gmail.com";
      extraConfig = { init.defaultBranch = "main"; };
    };
  };

  # thanks j4m3s
  systemd.user.sessionVariables = {
    DOOMLOCALDIR = "$HOME/.local/share/doomemacs";
    DOOMPROFILELOADFILE = "$HOME/.local/share/doomemacs/profiles/load.el";
  };

  # emacs daemon (emacsclient) service
  services.emacs.enable = true;

  # Autoload fonts from packages installed via Home Manager
  fonts.fontconfig.enable = true;

}
#+end_src

* TODO hosts (profiles)
** TODO chunix
#+begin_src nix :tangle ./hosts/chunix/default.nix :mkdirp yes
{ lib, ... };

with lib;
with bultins;
{
  system = "x86_64-linux";

  modules = {
    xdg.ssh.enable = true;

    profiles = {
      role = "workstation";
      user = "chu";
      networks=["us"];
      hardware = [
        "cpu/amd"
        "gpu/amd"
        "audio"
        "audio/realtime"
        "ssd"
      ];
    };
    desktop = {
      dwm.enable = true;
      term.default = "st";
      term.st.enable = true;
      browsers.default = "librewolf";
    };
  };
}
#+end_src
* shells.nix

#+begin_src nix :tangle ./shells.nix
{ config, lib, pkgs, ... }:

let
  myShellAliases = {
    supdate = "sudo nixos-rebuild switch --flake ~/.dotfiles";
    hupdate = "home-manager switch --flake ~/.dotfiles";
    update = "supdate && hupdate";

    cp = "cp -iv";
    mv = "mv -iv";
    rm = "rm -vI";
    bc = "bc -ql";
    rsync = "rsync -vrPlu";
    mkd = "mkdir -pv";
    yt = "yt-dlp --embed-metadata -i";
    yta = "yt -x -f bestaudio/best";
    ytt = "yt --skip-download --write-thumbnail";
    ffmpeg = "ffmpeg -hide_banner";
    lsblk = "lsblk --output NAME,LABEL,TRAN,TYPE,SIZE,FSUSED,FSTYPE,MOUNTPOINT";

    # Colorize commands when possible.
    ls = "ls -hN --color=auto --group-directories-first";
    grep = "grep --color=auto";
    diff = "diff --color=auto";
    ccat = "highlight --out-format=ansi";
    ip = "ip -color=auto";
  };
in {
  # Zsh; which is also enabled system-wide in /etc/nixos/configuration.nix,
  # as otherwise it wouldn't be able to source necessary files.
  programs.zsh = {
    enable = true;
    enableCompletion = true;
    autosuggestion.enable = true;
    syntaxHighlighting.enable = true;
    autocd = true;

    shellAliases = myShellAliases;

    history = {
      size = 10000;
      path = "${config.xdg.dataHome}/zsh/history";
    };

  };

  programs.bash = {
    enable = true;
    shellAliases = myShellAliases;
  };

}
#+end_src

* x11

** xinitrc

#+begin_src sh :tangle ./x11/xinitrc :mkdirp yes
dwm
#+end_src

* .editorconfig

#+begin_src conf :tangle ./.editorconfig
[{bin/*,**/*.zsh,.zshrc,.zshenv}]
indent_style = space
indent_size = 2
#+end_src
