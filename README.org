#+title: chunixos
* Installation
To install, run =install=:

#+name: run-install-script-example
#+begin_src sh :results none :tangle no
./install
#+end_src

which will run the following two scripts (credits to LibrePhoenix):

** Install script

Clone dotfiles:

#+name: install-clone-dotfiles
#+begin_src sh
if [ $# -gt 0 ]
  then
    SCRIPT_DIR=$1
  else
    SCRIPT_DIR=~/.config/dogfiles
fi
nix-shell -p git --command "git clone https://github.com/chumutt/dogfiles $SCRIPT_DIR"
#+end_src

Generate hardware configuration for the system:

#+name: install-generate-hardware-config
#+begin_src sh
sudo nixos-generate-config --show-hardware-config > $SCRIPT_DIR/system/hardware-configuration.nix
#+end_src

Check if the system is running UEFI or BIOS:

#+name: install-uefi-or-bios-check
#+begin_src sh
if [ -d /sys/firmware/efi/efivars ]; then
    sed -i "0,/bootMode.*=.*\".*\";/s//bootMode = \"uefi\";/" $SCRIPT_DIR/flake.nix
else
    sed -i "0,/bootMode.*=.*\".*\";/s//bootMode = \"bios\";/" $SCRIPT_DIR/flake.nix
    grubDevice=$(findmnt / | awk -F' ' '{ print $2 }' | sed 's/\[.*\]//g' | tail -n 1 | lsblk -no pkname | tail -n 1 )
    sed -i "0,/grubDevice.*=.*\".*\";/s//grubDevice = \"\/dev\/$grubDevice\";/" $SCRIPT_DIR/flake.nix
fi
#+end_src

Patch flake.nix with different username/name and remove email by default:

#+name: install-patch-flake-and-attune-to-user
#+begin_src sh
sed -i "0,/chu/s//$(whoami)/" $SCRIPT_DIR/flake.nix
sed -i "0,/Chu/s//$(getent passwd $(whoami) | cut -d ':' -f 5 | cut -d ',' -f 1)/" $SCRIPT_DIR/flake.nix
sed -i "s/chufilthymutt@gmail.com//" $SCRIPT_DIR/flake.nix
sed -i "s+~/.config/dogfiles+$SCRIPT_DIR+g" $SCRIPT_DIR/flake.nix
#+end_src

Open up editor to manually edit flake.nix before install:

#+name: install-edit-flake-prompt
#+begin_src sh
if [ -z "$EDITOR" ]; then
    EDITOR=nano;
fi
$EDITOR $SCRIPT_DIR/flake.nix;
#+end_src

Set permissions for files that should be owned by root:

#+name: install-harden-core-configuration
#+begin_src sh
# sudo $SCRIPT_DIR/harden $SCRIPT_DIR;
#+end_src

Rebuild system:

#+name: install-nixos-rebuild-system-with-flake
#+begin_src sh
sudo nixos-rebuild switch --flake $SCRIPT_DIR#system;
#+end_src

Install and build the home-manager configuration:

#+name: install-and-build-home-manager-config
#+begin_src sh
nix run home-manager/master --extra-experimental-features nix-command --extra-experimental-features flakes -- switch --flake $SCRIPT_DIR#user;
#+end_src

#+begin_src sh :noweb yes :eval no :shebang #!/bin/sh :tangle ./install
<<install-clone-dotfiles>>
<<install-generate-hardware-config>>
<<install-uefi-or-bios-check>>
<<install-patch-flake-and-attune-to-user>>
<<install-edit-flake-prompt>>
<<install-harden-core-configuration>>
<<install-nixos-rebuild-system-with-flake>>
<<install-and-build-home-manager-config>>
#+end_src

** Security hardening script

#+begin_quote
This will harden the security of [your configuration], preventing unprivileged users from editing the system-level ("root" configuration) files maliciously.

Run this inside of [~/.config/dogfiles] (or whatever directory you installed the dotfiles to).

Run this as root!

BTW, this assumes your user account has a PID/GID of 1000.

After running this, the command `nix flake update` will require root.
#+end_quote

Note: Additionally, this script is executed whenever the =install= script is executed.

#+name: harden-check-pwd
#+begin_src sh
if [ "$#" = 1 ]; then
    SCRIPT_DIR=$1;
else
    SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
fi
#+end_src

Enter the script's directory, set ownership(s), and then leave:

#+name: harden-enter-harden-and-exit
#+begin_src sh
pushd $SCRIPT_DIR &> /dev/null;
sudo chown 0:0 .;
sudo chown 0:0 profiles/*;
sudo chown -R 0:0 system;
sudo chown -R 0:0 patches;
sudo chown 0:0 flake.lock;
sudo chown 0:0 flake.nix
sudo chown 0:0 profiles
sudo chown 0:0 profiles/*/configuration.nix;
sudo chown 0:0 profiles/homelab/base.nix;
sudo chown 0:0 harden;
sudo chown 0:0 soften;
sudo chown 0:0 install;
sudo chown 0:0 update;
sudo chown 1000:users **/README.org;
popd &> /dev/null;
#+end_src

#+begin_src sh :noweb yes :eval no :shebang #!/bin/sh :tangle ./harden
<<harden-check-pwd>>
<<harden-enter-harden-and-exit>>
#+end_src

* Pull script

#+begin_quote
Automated script to update my non-primary system's configuration to be in sync with [the] upstream git [repository] while preserving local edits to [the configuration via a =git stash= command].
#+end_quote

#+name: pull-set-enter-script-dir
#+begin_src sh
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
#+end_src

Relax permissions temporarily so git can work:

#+name: pull-temporary-softener
#+begin_src sh
sudo $SCRIPT_DIR/soften $SCRIPT_DIR;
#+end_src

Stash local edits, pull changes, and re-apply local edits:

#+name: pull-stash-pull-apply
#+begin_src sh
pushd $SCRIPT_DIR &> /dev/null;
git stash;
git pull;
git stash apply;
popd &> /dev/null;
#+end_src

Set permissions for files that should be owned by root:

#+name: pull-set-perms
#+begin_src sh
sudo $SCRIPT_DIR/harden.sh $SCRIPT_DIR;
#+end_src

#+begin_src sh :noweb yes :eval no :shebang #!/bin/sh :tangle ./pull
<<pull-set-enter-script-dir>>
<<pull-temporary-softener>>
<<pull-stash-pull-apply>>
<<pull-set-perms>>
#+end_src
* Soften script

This will soften the security of these dotfiles, allowing the default unpriveleged user with UID/GID of 1000 to edit ALL FILES in the dotfiles directory.

This mainly is just here to be used by some scripts.

Run this inside of [~/.config/dogfiles] (or whatever directory you installed the dotfiles to).

Run this as root!

BTW, this assumes your user account has a UID/GID of 1000.

After running this, *[unprivileged users] can make edits to important system files which may compromise the system after running* =nixos-rebuild switch=. This script can be undone by running its inverse, =harden=.

#+begin_src sh :shebang #!/bin/sh :tangle ./soften
if [ "$#" = 1 ]; then
    SCRIPT_DIR=$1;
else
    SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
fi
pushd $SCRIPT_DIR &> /dev/null;
sudo chown -R 1000:users .;
popd &> /dev/null;
#+end_src

* Update script

#+begin_quote
Script to update my flake without synchronizing configuration.
#+end_quote

#+begin_src sh :shebang #!/bin/sh :tangle ./update
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Update flake
pushd $SCRIPT_DIR &> /dev/null;
sudo nix flake update;
sudo nix-channel --update;
nix-channel --update;
popd &> /dev/null;
#+end_src

* Upgrade script

#+begin_quote
Script to update system and sync. Does not pull changes from git.
#+end_quote

#+begin_src sh :shebang #!/bin/sh :tangle ./upgrade
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Update flake
$SCRIPT_DIR/update;

# Synchronize system
$SCRIPT_DIR/sync;
#+end_src

* Sync scripts

** System sync script

#+begin_quote
Script to synchronize system state with configuration files for nixos system and home-manager.
#+end_quote

#+begin_src sh :shebang #!/bin/sh :tangle ./sync-system
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Rebuild system
sudo nixos-rebuild switch --flake $SCRIPT_DIR#system;
#+end_src

** User sync script

#+begin_quote
Script to synchronize system state with configuration files for nixos system and home-manager.
#+end_quote

#+begin_src sh :shebang #!/bin/sh :tangle ./sync-user
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Fix root-owned sqlite errors
sudo chown -R 1000:users ~/.cache/nix;

# Install and build home-manager configuration
home-manager switch --flake $SCRIPT_DIR#user;

$SCRIPT_DIR/sync-posthook
#+end_src

** Post-hook sync script

#+begin_quote
Post hooks to be called after a configuration sync.

Mainly just to reload stylix.
#+end_quote

Note: Disabled.

#+begin_src sh :shebang #!/bin/sh :tangle ./sync-posthook

# xmonad
# pgrep xmobar &> /dev/null && echo "Killing old xmobar instances" && echo "Running killall xmobar" && killall xmobar &> /dev/null; # xmonad will restart xmobar
# pgrep xmonad &> /dev/null && echo "Recompiling xmonad" && echo "Running xmonad --recompile && xmonad --restart" && xmonad --recompile &> /dev/null && xmonad --restart &> /dev/null;
# pgrep .dunst-wrapped &> /dev/null && echo "Restarting dunst" && killall .dunst-wrapped && echo "Running dunst" && dunst &> /dev/null & disown;
# pgrep xmonad &> /dev/null && echo "Reapplying background from stylix via feh" && echo "Running ~/.fehbg-stylix" && ~/.fehbg-stylix &> /dev/null & disown;

# hyprland
# pgrep Hyprland &> /dev/null && echo "Reloading hyprland" && hyprctl reload &> /dev/null;
# pgrep .waybar-wrapped &> /dev/null && echo "Restarting waybar" && killall .waybar-wrapped && echo "Running waybar" && waybar &> /dev/null & disown;
# pgrep fnott &> /dev/null && echo "Restarting fnott" && killall fnott && echo "Running fnott" && fnott &> /dev/null & disown;
# pgrep hyprpaper &> /dev/null && echo "Reapplying background via hyprpaper" && killall hyprpaper && echo "Running hyprpaper" && hyprpaper &> /dev/null & disown;
# pgrep nwggrid-server &> /dev/null && echo "Restarting nwggrid-server" && killall nwggrid-server && echo "Running nwggrid-wrapper" && nwggrid-wrapper &> /dev/null & disown;

# emacs
# pgrep emacs &> /dev/null && echo "Reloading emacs stylix theme" && echo "Running emacsclient --no-wait --eval \"(load-theme 'doom-stylix t nil)\"" && emacsclient --no-wait --eval "(load-theme 'doom-stylix t nil)" &> /dev/null;
#+end_src

* flake.nix
#+begin_src nix :tangle ./flake.nix
{
  description = "nixOS config flake";
  outputs = inputs@{ self, ... }:
    let
      system = "x86_64-linux";
      systemSettings = {
        system = "x86_64-linux";
        hostname = "chunixos-vm";
        profile = "work";
        timezone = "America/Chicago";
        locale = "en_US.UTF-8";
        bootMode = "uefi"; # uefi or bios
        bootMountPath =
          "/boot"; # mount path for efi boot partition; only used for uefi boot mode
        grubDevice =
          ""; # device identifier for grub; only used for legacy (bios) boot mode
        gpuType = "vm"; # amd, intel, nvidia, or vm.
      };
      userSettings = rec {
        username = "chu";
        name = "chu the pup";
        email = "chufilthymutt@gmail.com";
        dotfilesDir = "~/.config/dogfiles";
        # theme = null; TODO
        # wm = null; #./system/wm/example.nix; ./user/wm/example.nix TODO
        wm = ./system/wm/x11.nix; # TODO temporary, installs plasma 6
        # wmType = "x11"; #./system/wm/example.nix, e.g. ./system/wm/x11.nix
        wmType = ./system/wm/x11.nix; # TODO temporary, installs plasma 6
        browser = "librewolf";
        term = "konsole";
        font = "Noto Sans";
        fontPkg = pkgs.noto-fonts;
        editor = "emacsclient";
        # editor spawning translator
        # generates a command that can be used to spawn editor inside a gui
        # EDITOR and TERM session variables must be set in home.nix or other module
        # I set the session variable SPAWNEDITOR to this in my home.nix for convenience
        spawnEditor = if (editor == "emacsclient") then
          "emacsclient -c -a 'emacs'"
        else
          (if ((editor == "vim") || (editor == "nvim")
            || (editor == "nano")) then
            "exec " + term + " -e " + editor
          else
            editor);
      };
      # create patched nixpkgs
      nixpkgs-patched = (import inputs.nixpkgs {
        system = systemSettings.system;
        rocmSupport = (if systemSettings.gpu == "amd" then true else false);
      }).applyPatches {
        name = "nixpkgs-patched";
        src = inputs.nixpkgs;
      };
      # configure pkgs
      # use nixpkgs if running a server (homelab or worklab profile)
      # otherwise use patched nixos-unstable nixpkgs
      pkgs = (if ((systemSettings.profile == "homelab")
        || (systemSettings.profile == "worklab")) then
        pkgs-stable
      else
        (import nixpkgs-patched {
          system = systemSettings.system;
          config = {
            allowUnfree = true;
            allowUnfreePredicate = (_: true);
          };
        }));
      pkgs-stable = import inputs.nixpkgs-stable {
        system = systemSettings.system;
        config = {
          allowUnfree = true;
          allowUnfreePredicate = (_: true);
        };
      };
      pkgs-unstable = import inputs.nixpkgs-patched {
        system = systemSettings.system;
        config = {
          allowUnfree = true;
          allowUnfreePredicate = (_: true);
        };
      };
      # configure lib
      # use nixpkgs if running a server (homelab or worklab profile)
      # otherwise use patched nixos-unstable nixpkgs
      lib = (if ((systemSettings.profile == "homelab")
        || (systemSettings.profile == "worklab")) then
        inputs.nixpkgs-stable.lib
      else
        inputs.nixpkgs.lib);
      # use home-manager-stable if running a server (homelab or worklab profile)
      # otherwise use home-manager-unstable
      home-manager = (if ((systemSettings.profile == "homelab")
        || (systemSettings.profile == "worklab")) then
        inputs.home-manager-stable
      else
        inputs.home-manager-unstable);
      # Systems that can run tests:
      supportedSystems = [ "aarch64-linux" "i686-linux" "x86_64-linux" ];
      # Function to generate a set based on supported systems:
      forAllSystems = inputs.nixpkgs.lib.genAttrs supportedSystems;
      # Attribute set of nixpkgs for each system:
      nixpkgsFor =
        forAllSystems (system: import inputs.nixpkgs { inherit system; });
    in {
      homeConfigurations = {
        user = home-manager.lib.homeManagerConfiguration {
          inherit pkgs;
          modules = [
            (./. + "/profiles" + ("/" + systemSettings.profile)
              + "/home.nix") # load home.nix from selected PROFILE
          ];
          extraSpecialArgs = {
            inherit pkgs-stable;
            inherit systemSettings;
            inherit userSettings;
            inherit inputs;
          };
        };
      };
      nixosConfigurations = {
        system = lib.nixosSystem {
          system = systemSettings.system;
          modules = [
            (./. + "/profiles" + ("/" + systemSettings.profile)
              + "/configuration.nix")
          ]; # load configuration.nix from selected PROFILE
          specialArgs = {
            inherit pkgs-stable;
            inherit systemSettings;
            inherit userSettings;
            inherit inputs;
          };
        };
      };
      # apps = forAllSystems (system: {
      #   default = self.apps.${system}.install;
      #   install = {
      #     type = "app";
      #     program = "${self.packages.${system}.install}/bin/install";
      #   };
      # });
    };
  inputs = {
    nixpkgs.url = "nixpkgs/nixos-unstable";
    nixpkgs-stable.url = "nixpkgs/nixos-24.05";
    home-manager-unstable.url = "github:nix-community/home-manager/master";
    home-manager-unstable.inputs.nixpkgs.follows = "nixpkgs";
    home-manager-stable.url = "github:nix-community/home-manager/release-24.05";
    home-manager-stable.inputs.nixpkgs.follows = "nixpkgs-stable";
    nixos-hardware.url = "github:nixos/nixos-hardware";
    emacs-overlay = {
      url = "github:nix-community/emacs-overlay";
      inputs = {
        nixpkgs.follows = "nixpkgs";
        nixpkgs-stable.follows = "nixpkgs";
      };
    };
    # Ad blocker
    blocklist-hosts = {
      url = "github:StevenBlack/hosts";
      flake = false;
    };
  };
}

#+end_src
* profiles/
** work/
*** configuration.nix
#+begin_src nix :mkdirp yes :tangle ./profiles/work/configuration.nix
# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ pkgs, lib, inputs, systemSettings, userSettings, ... }:

{
  imports = [
    # Include the results of the hardware scan.
    ../../system/hardware-configuration.nix
    ../../system/hardware/systemd.nix
    ../../system/hardware/time.nix
    ../../system/hardware/kernel.nix
    ../../system/hardware/power.nix
    ../../system/hardware/opengl.nix
    ../../system/hardware/printing.nix
    ../../system/hardware/bluetooth.nix
    # (./. + "../../../system/wm" + ("/" + userSettings.wm) + ".nix")
    ../../system/wm/x11.nix # TODO fix
    ../../system/app/vm.nix
    ../../system/app/nh.nix
    ../../system/security/gpg.nix
    ../../system/security/sshd.nix
    ../../system/security/proxy.nix
    ../../system/security/firewall.nix
    # TODO ../../system/security/automount.nix
  ];

  # Fix nix path
  nix.nixPath = [
    "nixpkgs=/nix/var/nix/profiles/per-user/root/channels/nixos"
    ("nixos-config=" + userSettings.dotfilesDir + "/system/configuration.nix")
    "/nix/var/nix/profiles/per-user/root/channels"
  ];

  # Ensure nix flakes are enabled
  nix.package = pkgs.nixFlakes;
  nix.extraOptions = ''
    experimental-features = nix-command flakes
  '';

  # wheel group gets trusted access to nix daemon
  nix.settings.trusted-users = [ "@wheel" ];

  # Allow unfree packages. Sorry, rms.
  nixpkgs.config.allowUnfree = true;

  # Bootloader
  boot = {
    loader = {
      systemd-boot.enable =
        if (systemSettings.bootMode == "uefi") then true else false;
      efi.canTouchEfiVariables =
        if (systemSettings.bootMode == "uefi") then true else false;
      efi.efiSysMountPoint =
        systemSettings.bootMountPath; # does nothing if running bios rather than uefi
      grub.enable = if (systemSettings.bootMode == "uefi") then false else true;
      grub.device =
        systemSettings.grubDevice; # does nothing if running uefi rather than bios
    };
    kernelModules = [ "i2c-dev" "i2c-piix4" "cpufreq_powersave" ];
    initrd.luks.devices."luks-c233bfdc-56f5-4381-982a-3e17a746e0da".device =
      "/dev/disk/by-uuid/c233bfdc-56f5-4381-982a-3e17a746e0da"; # TODO
  };

  networking = {
    hostName = systemSettings.hostname; # Define your hostname.
    networkmanager.enable = true; # Enable networking
  };

  # Timezone and locale
  time.timeZone = systemSettings.timezone; # time zone
  i18n.defaultLocale = systemSettings.locale;
  i18n.extraLocaleSettings = {
    LC_ADDRESS = systemSettings.locale;
    LC_IDENTIFICATION = systemSettings.locale;
    LC_MEASUREMENT = systemSettings.locale;
    LC_MONETARY = systemSettings.locale;
    LC_NAME = systemSettings.locale;
    LC_NUMERIC = systemSettings.locale;
    LC_PAPER = systemSettings.locale;
    LC_TELEPHONE = systemSettings.locale;
    LC_TIME = systemSettings.locale;
  };

  # User account
  users.users.${userSettings.username} = {
    isNormalUser = true;
    description = userSettings.name;
    extraGroups =
      [ "networkmanager" "wheel" "input" "dialout" "video" "render" ];
    packages = [ ];
    uid = 1000;
  };

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  # or
  # $ nh search wget
  environment = {
    systemPackages = with pkgs; [
      vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
      wget
      zsh
      git
      cryptsetup
      home-manager
      wpa_supplicant

      # scripts
      (pkgs.writeScriptBin "comma" ''
        if [ "$#" = 0 ]; then
          echo "usage: comma PKGNAME... [EXECUTABLE]";
        elif [ "$#" = 1 ]; then
          nix-shell -p $1 --run $1;
        elif [ "$#" = 2 ]; then
          nix-shell -p $1 --run $2;
        else
          echo "error: too many arguments";
          echo "usage: comma PKGNAME... [EXECUTABLE]";
        fi
      '') # by librephoenix

      tldr
      neovim
      htop
      ((emacsPackagesFor emacs-gtk).emacsWithPackages (epkgs: [ epkgs.vterm ]))
      protonup # imperative bootstrap for proton-ge

      # custom scripts
      # TODO fix this script because it doesn't work
      (writeShellScriptBin "chu-install-home-manager-unstable" ''
              # doesn't work currently
                # home-manager is recommended for this setup
                # this installs the standalone version (recommended)
                nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager &&
                nix-channel --update &&
                nix-shell '<home-manager>' -A install
        	# then run home-manager switch --flake ~/.config/dogfiles/#dogleash
      '')
      (writeShellScriptBin "chu-install-doom-emacs" ''
        git clone https://github.com/chumutt/doom ~/.config/doom
        git clone https://github.com/doomemacs/doomemacs --depth 1 ~/.config/emacs
        ./.config/emacs/bin/doom install
      '')
    ];

    shells = with pkgs; [ zsh ];

  };

  programs = {
    zsh.enable = true;
    nh.enable = true;
  };

  fonts.fontDir.enable = true;

  xdg.portal = {
    enable = true;
    extraPortals = with pkgs; [ xdg-desktop-portal xdg-desktop-portal-gtk ];
  };

  # List services that you want to enable:
  services = {
    # Make Emacs packages available to the Emacs Daemon (emacsclient).
    emacs.package = with pkgs;
      ((emacsPackagesFor emacs-gtk).emacsWithPackages
        (epkgs: [ epkgs."vterm" ]));
  };

  # Add emacs overlay
  nixpkgs.overlays = [ (import inputs.emacs-overlay) ];
  # TODO Move?

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.11"; # Did you read the comment?

}
#+end_src
*** home.nix
#+begin_src nix :mkdirp yes :tangle ./profiles/work/home.nix
{ config, pkgs, userSettings, ... }: {
  imports = [
    # (./. + "../../../user/wm" + ("/" + userSettings.wm + "/" + userSettings.wm)
    #   + ".nix") # My window manager selected from flake.nix TODO
    ../../user/shell/sh.nix
    ../../user/app/lf/lf.nix
    ../../user/app/git/git.nix
    ../../user/app/vm/vm.nix
    (./. + "../../../user/app/browser" + ("/" + userSettings.browser)
      + ".nix") # My default browser selected from flake.nix
    ../../user/lang/cc/cc.nix
    ../../user/lang/lisp/lisp.nix
    ../../user/lang/rust/rust.nix
    ../../user/hardware/bluetooth.nix
    ../../user/app/keepass/keepass.nix

  ];
  home = {
    username = userSettings.username;
    homeDirectory = "/home/" + userSettings.username;
    stateVersion = "24.05"; # Do not modify.
    packages = with pkgs; [
      # core
      zsh
      konsole
      librewolf
      git

      # office
      nextcloud-client
      libreoffice-fresh
      keepassxc
      xournalpp
      kdePackages.kate

      # media
      gimp
      krita
      pinta
      inkscape
      mpv
      yt-dlp
      gallery-dl
      libresprite
      openscad
      obs-studio
      ffmpeg
      (pkgs.writeScriptBin "kdenlive-accel" ''
        #!/bin/sh
        DRI_PRIME=0 kdenlive "$1"
      '')
      mediainfo
      libmediainfo
      audio-recorder
      gnome.cheese
      raysession
      ardour
      rosegarden
      tenacity
      calf

      # Various dev packages
      sshfs
      texinfo
      libffi
      zlib
      # nodePackages.ungit
      ventoy
      kdePackages.kdenlive
    ];
  };
  programs = {
    home-manager.enable = true;
    git = {
      enable = true;
      userEmail = userSettings.email;
      userName = userSettings.name;
      aliases = {
        ci = "commit";
        co = "checkout";
        s = "status";
      };
      extraConfig = { push = { autoSetupRemote = true; }; };
    };
    zsh.enable = true;
    ssh.enable = true;
    gpg.enable = true;
    firefox.profiles.chu = {
      name = userSettings.username;
      path = userSettings.username;
      search = { default = "DuckDuckGo"; };
    };
  };
  services = {
    nextcloud-client = {
      enable = true;
      startInBackground = true;
    };
  };
  # xdg = {
  #   enable = true;
  #   userDirs = {
  #     enable = true;
  #     createDirectories = true;
  #     # TODO
  #   };
  # };
}
#+end_src
* system/
** app/
*** gamemode.nix
#+begin_src nix :mkdirp yes :tangle ./system/app/gamemode.nix
{ pkgs, ... }:

{
  # Feral GameMode
  environment.systemPackages = [ pkgs.gamemode ];
  programs.gamemode.enable = true;
}
#+end_src
*** nh.nix
#+begin_src nix :mkdirp yes :tangle ./system/app/nh.nix
{ config, pkgs, ... }: {
  programs.nh = {
    enable = true;
    clean = {
      enable = true;
      extraArgs = "--keep-since 4d --keep 3";
    };
  };
}
#+end_src
*** steam.nix
#+begin_src nix :mkdirp yes :tangle ./system/app/steam.nix
{ pkgs, ... }:

{
  hardware.opengl.driSupport32Bit = true;
  programs.steam.enable = true;
  environment = {
    systemPackages = [ pkgs.steam ];
    sessionVariables = {
      STEAM_EXTRA_COMPAT_TOOLS_PATHS =
        "\${XDG_DATA_DIR}/steam/root/compatibilitytools.d";
    };
  };
}
#+end_src
*** vm.nix
#+begin_src nix :mkdirp yes :tangle ./system/app/vm.nix
{ config, pkgs, ... }:

{
  environment.systemPackages = with pkgs; [
    virt-manager
    looking-glass-client
    # distrobox
  ];
  virtualisation.libvirtd = {
    allowedBridges = [ "nm-bridge" "virbr0" ];
    enable = true;
    qemu.runAsRoot = false;
  };
  # virtualisation.waydroid.enable = true;
}
#+end_src
** hardware/
*** bluetooth.nix
#+begin_src nix :mkdirp yes :tangle ./system/hardware/bluetooth.nix
{ ... }:

{
  hardware.bluetooth.enable = true;
  services.blueman.enable = true;
}
#+end_src
*** kernel.nix
#+begin_src nix :mkdirp yes :tangle ./system/hardware/kernel.nix
{ config, pkgs, ... }:

{
  # boot = {
  #   kernelPackages = pkgs.linux;
  #   consoleLogLevel = 0;
  # };
}
#+end_src
*** opengl.nix
#+begin_src nix :mkdirp yes :tangle ./system/hardware/opengl.nix
{ pkgs, ... }:

{
  # OpenGL
  hardware.graphics = {
    enable = true;
    extraPackages = with pkgs; [ rocmPackages.clr.icd ];
  };
}
#+end_src
*** power.nix
#+begin_src nix :mkdirp yes :tangle ./system/hardware/power.nix
{ ... }:

{
  services.power-profiles-daemon.enable = false;
  services.tlp = {
    enable = true;
    settings = {
      CPU_SCALING_GOVERNOR_ON_AC = "performance";
      CPU_SCALING_GOVERNOR_ON_BAT = "powersave";
      CPU_ENERGY_PERF_POLICY_ON_BAT = "balance";
      CPU_ENERGY_PERF_POLICY_ON_AC = "balance_performance";
      CPU_DRIVER_OPMODE_ON_AC = "active";
      CPU_DRIVER_OPMODE_ON_BAT = "active";

      WIFI_PWR_ON_AC = "on";
      WIFI_PWR_ON_BAT = "on";
      RUNTIME_PM_ON_AC = "auto";
      RUNTIME_PM_ON_BAT = "auto";

      CPU_MIN_PERF_ON_AC = 10;
      CPU_MAX_PERF_ON_AC = 90;
      CPU_MIN_PERF_ON_BAT = 10;
      CPU_MAX_PERF_ON_BAT = 50;

      CPU_BOOST_ON_AC = 1;
      CPU_BOOST_ON_BAT = 0;
      CPU_HWP_DYN_BOOST_ON_AC = 1;
      CPU_HWP_DYN_BOOST_ON_BAT = 0;

      START_CHARGE_THRESH_BAT0 = 75;
      STOP_CHARGE_THRESH_BAT0 = 80;

      MEM_SLEEP_ON_AC = "deep";
      MEM_SLEEP_ON_BAT = "deep";

      PLATFORM_PROFILE_ON_AC = "performance";
      PLATFORM_PROFILE_ON_BAT = "low-power";

      RADEON_DPM_STATE_ON_AC = "performance";
      RADEON_DPM_STATE_ON_BAT = "battery";
      RADEON_POWER_PROFILE_ON_AC = "high";
      RADEON_POWER_PROFILE_ON_BAT = "low";

      INTEL_GPU_MIN_FREQ_ON_AC = 250;
      INTEL_GPU_MIN_FREQ_ON_BAT = 250;
    };
  };
}
#+end_src
*** printing.nix
#+begin_src nix :mkdirp yes :tangle ./system/hardware/printing.nix
{ pkgs, ... }:

{
  # Enable printing
  services = {
    printing.enable = true;
    # Print over network
    # avahi.enable = true;
    # avahi.nssmdns4 = true;
    # avahi.openFirewall = true;
  };
  environment.systemPackages = [ pkgs.cups-filters ];
}
#+end_src
*** systemd.nix
#+begin_src nix :mkdirp yes :tangle ./system/hardware/systemd.nix
{ ... }:

{ # systemd journal garbage collection/refusal
  services.journald = {
    extraConfig = ''
      SystemMaxUse=50M
      SystemMaxFiles=5'';
    rateLimitBurst = 500;
    rateLimitInterval = "30s";
  };
}
#+end_src
*** time.nix
#+begin_src nix :mkdirp yes :tangle ./system/hardware/time.nix
{ ... }:

{
  # I assume this is ntp time syncing for the system clock.
  services.timesyncd.enable = true;
}
#+end_src
** security/
*** firewall.nix
#+begin_src nix :mkdirp yes :tangle ./system/security/firewall.nix
{ ... }:

{
  networking.firewall = {
    # Open ports in the firewall.
    # allowedTCPPorts = [ ... ];
    # allowedUDPPorts = [ ... ];
    # Or disable the firewall altogether.
    # enable = false;
  };
}
#+end_src
*** gpg.nix
#+begin_src nix :mkdirp yes :tangle ./system/security/gpg.nix
{ ... }:

{
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  programs = {
    mtr.enable = true;
    gnupg.agent = {
      enable = true;
      enableSSHSupport = true;
    };
  };
}
#+end_src
*** proxy.nix
#+begin_src nix :mkdirp yes :tangle ./system/security/proxy.nix
{ ... }:

{
  # Configure network proxy if necessary
  # proxy.default = "http://user:password@proxy:port/";
  # proxy.noProxy = "127.0.0.1,localhost,internal.domain";
}
#+end_src
*** sshd.nix
#+begin_src nix :mkdirp yes :tangle ./system/security/sshd.nix
{ userSettings, ... }:

{
  # Enable incoming ssh
  services.openssh = {
    enable = true;
    openFirewall = true;
    settings = {
      PasswordAuthentication = false;
      PermitRootLogin = "no";
    };
  };
}
#+end_src
** wm/
*** x11.nix
#+begin_src nix :mkdirp yes :tangle ./system/wm/x11.nix
{ pkgs, ... }:
# TODO be able to pick between kde/gnome/suckless & be able to extend
{
  imports = [ ./pipewire.nix ./dbus.nix ./gnome-keyring.nix ];

  services = {
    xserver = {
      enable = true; # Enable the X11 windowing system.
      xkb = { # Configure keymap in X11
        layout = "us";
        variant = "";
        options = "caps:escape";
      };

      displayManager = {
        sddm.enable = true; # KDE
        # gdm.enable = true; # GNOME
        # lightdm.enable = true; # Canonical
        # startx.enable = true; # none
        sessionCommands = ''
          xset b off
          xset -dpms
          xset r rate 350 50
        '';
      };

      desktopManager = {
        # Enable the KDE Plasma Desktop Environment.
        plasma6.enable = true; # KDE
        # gnome.enable = true; # GNOME
      };
    };

    # windowManager = {
    # dwm.enable = true; # suckless
    # exwm.enable = true; # emacs
    # };

    # For virtual machine guests to enable a daemon allowing for clipboard (copy/paste) sharing.
    spice-vdagentd.enable = true;

    libinput = {
      enable =
        true; # Enable touchpad support (enabled default in most desktopManager).
      touchpad.disableWhileTyping = true;
    };

  };
}
#+end_src
*** dbus.nix
#+begin_src nix :mkdirp yes :tangle ./system/wm/dbus.nix
{ pkgs, ... }:

{
  services.dbus = {
    enable = true;
    packages = [ pkgs.dconf ];
  };

  programs.dconf = { enable = true; };
}
#+end_src
*** gnome-keyring.nix
#+begin_src nix :mkdirp yes :tangle ./system/wm/gnome-keyring.nix
{ ... }:

{
  services.gnome = {
    gnome-keyring.enable = true;
  };
}
#+end_src
*** pipewire.nix
#+begin_src nix :mkdirp yes :tangle ./system/wm/pipewire.nix
{ ... }:

{
  # Pipewire
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    jack.enable = true;
  };
}
#+end_src
* user/
** app/
*** browser/
**** librewolf.nix
#+begin_src nix :mkdirp yes :tangle ./user/app/browser/librewolf.nix
{ pkgs, userSettings, ... }:

{
  # Module installing librewolf as default browser
  home.packages = if (userSettings.wmType == "wayland") then
    [ pkgs.librewolf-wayland ]
  else
    [ pkgs.librewolf ];

  home.sessionVariables = if (userSettings.wmType == "wayland") then {
    DEFAULT_BROWSER = "${pkgs.librewolf-wayland}/bin/librewolf";
  } else {
    DEFAULT_BROWSER = "${pkgs.librewolf}/bin/librewolf";
  };

  home.file.".librewolf/librewolf.overrides.cfg".text =
    ''defaultPref("font.name.serif.x-western","'' + userSettings.font + ''
      ");

          defaultPref("font.size.variable.x-western",20);
          defaultPref("browser.toolbars.bookmarks.visibility","always");
          defaultPref("privacy.resisttFingerprinting.letterboxing", true);
          defaultPref("network.http.referer.XOriginPolicy",2);
          defaultPref("privacy.clearOnShutdown.history",true);
          defaultPref("privacy.clearOnShutdown.downloads",true);
          defaultPref("privacy.clearOnShutdown.cookies",true);
          defaultPref("gfx.webrender.software.opengl",false);
          defaultPref("webgl.disabled",true);
          pref("font.name.serif.x-western","'' + userSettings.font + ''
        ");

            pref("font.size.variable.x-western",20);
            pref("browser.toolbars.bookmarks.visibility","always");
            pref("privacy.resisttFingerprinting.letterboxing", true);
            pref("network.http.referer.XOriginPolicy",2);
            pref("privacy.clearOnShutdown.history",true);
            pref("privacy.clearOnShutdown.downloads",true);
            pref("privacy.clearOnShutdown.cookies",true);
            pref("gfx.webrender.software.opengl",false);
            pref("webgl.disabled",true);
      '';

  xdg.mimeApps.defaultApplications = {
    "text/html" = "librewolf.desktop";
    "x-scheme-handler/http" = "librewolf.desktop";
    "x-scheme-handler/https" = "librewolf.desktop";
    "x-scheme-handler/about" = "librewolf.desktop";
    "x-scheme-handler/unknown" = "librewolf.desktop";
  };

}
#+end_src
*** games/games.nix
#+begin_src nix :mkdirp yes :tangle ./user/app/games/games.nix
{ pkgs, pkgs-stable, ... }:
let
  librephoenixRetroarch = (pkgs.retroarch.override {
    cores = with pkgs.libretro; [
      vba-m
      (desmume.overrideAttrs (oldAttrs: {
        preConfigure = ''
          sed -i 's/0009BF123456/0022AA067857/g' desmume/src/firmware.cpp;
          sed -i 's/outConfig.MACAddress\[0\] = 0x00/outConfig.MACAddress[0] = 0x00/g' desmume/src/firmware.cpp;
          sed -i 's/outConfig.MACAddress\[1\] = 0x09/outConfig.MACAddress[1] = 0x22/g' desmume/src/firmware.cpp;
          sed -i 's/outConfig.MACAddress\[2\] = 0xBF/outConfig.MACAddress[2] = 0xAA/g' desmume/src/firmware.cpp;
          sed -i 's/outConfig.MACAddress\[3\] = 0x12/outConfig.MACAddress[3] = 0x06/g' desmume/src/firmware.cpp;
          sed -i 's/outConfig.MACAddress\[4\] = 0x34/outConfig.MACAddress[4] = 0x78/g' desmume/src/firmware.cpp;
          sed -i 's/outConfig.MACAddress\[5\] = 0x56/outConfig.MACAddress[5] = 0x57/g' desmume/src/firmware.cpp;
          sed -i 's/0x00, 0x09, 0xBF, 0x12, 0x34, 0x56/0x00, 0x22, 0xAA, 0x06, 0x78, 0x57/g' desmume/src/wifi.cpp;
        '';
      }))
      dolphin
      genesis-plus-gx
    ];
  });
in {
  home.packages = (with pkgs; [
    pegasus-frontend
    librephoenixRetroarch
    libfaketime
    qjoypad
    superTux
    superTuxKart
    gamepad-tool
  ]) # ++ (with pkgs-stable; [ pokefinder ])
  ;

  nixpkgs.config = {
    allowUnfree = true;
    allowUnfreePredicate = (_: true);
  };

  # The following 2 declarations allow retroarch to be imported into gamehub
  # Set retroarch core directory to ~/.local/bin/libretro
  # and retroarch core info directory to ~/.local/share/libretro/info
  home.file = {
    ".local/bin/libretro".source =
      "${librephoenixRetroarch}/lib/retroarch/cores";
    ".local/bin/libretro-shaders".source =
      "${librephoenixRetroarch}/lib/retroarch/cores";
    ".local/share/libretro/info".source = fetchTarball {
      url =
        "https://github.com/libretro/libretro-core-info/archive/refs/tags/v1.15.0.tar.gz";
      sha256 = "004kgbsgbk7hn1v01jg3vj4b6dfb2cp3kcp5hgjyl030wqg1r22q";
    };
  };

}
#+end_src
*** git/git.nix
#+begin_src nix :mkdirp yes :tangle ./user/app/git/git.nix
{ config, pkgs, userSettings, ... }:

{
  home.packages = [ pkgs.git ];
  programs.git = {
    enable = true;
    userName = userSettings.name;
    userEmail = userSettings.email;
    extraConfig = {
      init.defaultBranch = "main";
      safe.directory = [
        (userSettings.dotfilesDir)
        (userSettings.dotfilesDir + "/.git")
      ];
    };
  };
}
#+end_src
*** keepass/keepass.nix
#+begin_src nix :mkdirp yes :tangle ./user/app/keepass/keepass.nix
{ config, pkgs, ... }:

{
  home.packages = with pkgs; [ keepassxc keepmenu ];
}
#+end_src
*** lf/
**** lf.nix
#+begin_src nix :mkdirp yes :tangle ./user/app/lf/lf.nix
{ config, pkgs, ... }: {

  home = {
    packages = with pkgs; [ lf ueberzugpp ];
    file = {
      ".config/lf/lfrc".source = ./lfrc;
      ".config/lf/scope".source = ./scope;
      ".config/lf/icons".source = ./icons;
      ".config/lf/cleaner".source = ./cleaner;
    };
  };
}
#+end_src
**** cleaner
#+begin_src sh :tangle ./user/app/lf/cleaner :shebang #!/bin/sh
if [ -n "$FIFO_UEBERZUG" ]; then
	printf '{"action": "remove", "identifier": "PREVIEW"}\n' > "$FIFO_UEBERZUG"
fi
#+end_src
**** icons
#+begin_src conf :tangle ./user/app/lf/icons
di	📁
fi	📃
tw	🤝
ow	📂
ln	⛓
or	❌
ex	🎯
*.txt	✍
*.mom	✍
*.me	✍
*.ms	✍
*.avif	🖼
*.png	🖼
*.webp	🖼
*.ico	🖼
*.jpg	📸
*.jpe	📸
*.jpeg	📸
*.gif	🖼
*.svg	🗺
*.tif	🖼
*.tiff	🖼
*.xcf	🖌
*.html	🌎
*.xml	📰
*.gpg	🔒
*.css	🎨
*.pdf	📚
*.djvu	📚
*.epub	📚
*.csv	📓
*.xlsx	📓
*.tex	📜
*.md	📘
*.r	    📊
*.R	    📊
*.rmd	📊
*.Rmd	📊
*.m	    📊
*.mp3	🎵
*.opus	🎵
*.ogg	🎵
*.m4a	🎵
*.flac	🎼
*.wav	🎼
*.mkv	🎥
*.mp4	🎥
*.webm	🎥
*.mpeg	🎥
*.avi	🎥
*.mov	🎥
*.mpg	🎥
*.wmv	🎥
*.m4b	🎥
*.flv	🎥
*.zip	📦
*.rar	📦
*.7z	📦
*.tar	📦
*.z64	🎮
*.v64	🎮
*.n64	🎮
*.gba	🎮
*.nes	🎮
*.gdi	🎮
*.1	    ℹ
*.nfo	ℹ
*.info	ℹ
*.log	📙
*.iso	📀
*.img   📀
*.bib   🎓
*.ged   👪
*.part  💔
*.torrent 🔽
*.jar   ♨
*.java	♨
#+end_src
**** lfrc
#+begin_src conf :tangle ./user/app/lf/lfrc
# Luke's lf settings


# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit true

# cmds/functions
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
	image/vnd.djvu|application/pdf|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
		setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
			[ -z "$file" ] && continue
			lf -remote "send select \"$file\""
			lf -remote "send toggle"
		done &
		;;
	audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted) $EDITOR $fx ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
        application/octet-stream) case ${f##*.} in
			doc|docx|xls|xlsx|odt|ppt|pptx) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
			ghw) setsid -f gtkwave $f >/dev/null 2>&1 ;;
			ts) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
			*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	   	esac ;;
	*) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir $mkdir -p "$@"

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && {
		case $fx in
			*.tar.bz2)   tar xjf $fx     ;;
			*.tar.gz)    tar xzf $fx     ;;
			*.bz2)       bunzip2 $fx     ;;
			*.rar)       unrar e $fx     ;;
			*.gz)        gunzip $fx      ;;
			*.tar)       tar xf $fx      ;;
			*.tbz2)      tar xjf $fx     ;;
			*.tgz)       tar xzf $fx     ;;
			*.zip)       unzip $fx       ;;
			*.Z)         uncompress $fx  ;;
			*.7z)        7z x $fx        ;;
			*.tar.xz)    tar xf $fx      ;;
		esac
	}
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "🚚 File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "📋 File(s) copied." "File(s) copies to $dest."
}}

cmd setbg "$1"

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

# Bindings
map <c-f> $lf -remote "send $id select \"$(fzf)\""
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map H cd ~
map g top
map D delete
map E extract
map C copyto
map M moveto
map <c-n> push :mkdir<space>""<left>
map <c-r> reload
map <c-s> set hidden!
map <enter> shell
map x $$f
map X !$f
map o &mimeopen "$f"
map O $mimeopen --ask "$f"

map A :rename; cmd-end # at the very end
map c push A<c-u> # new rename
map I :rename; cmd-home # at the very beginning
map i :rename # before extension
map a :rename; cmd-right # after extension
map B bulkrename
map b $setbg $f

map <c-e> down
map <c-y> up
map V push :!nvim<space>

map W $setsid -f $TERMINAL >/dev/null 2>&1

map U $printf "%s" "$fx" | xclip -selection clipboard
map u $printf "%s" "$fx" | sed 's/.*\///' | xclip -selection clipboard
map . $printf "%s" "$fx" | sed -E 's/^.+\[/https:\/\/www.youtube.com\/watch?v=/' | sed -E 's/\]\..+//' | xclip -selection clipboard
map <gt> $printf "%s" "$fx" | sed -E 's/^.+\[/https:\/\/piped.video\/watch?v=/' | sed -E 's/\]\..+//' | xclip -selection clipboard
map T $nsxiv -t "$(pwd)" # opens thumbnail mode
map <c-l> unselect



# Source Bookmarks
source "~/.config/lf/shortcutrc"
#+end_src
**** scope
#+begin_src sh :tangle ./user/app/lf/scope :shebang #!/bin/sh
# File preview handler for lf.

set -C -f
IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}"

image() {
	if [ -f "$1" ] && [ -n "$DISPLAY" ] && [ -z "$WAYLAND_DISPLAY" ] && command -V ueberzug >/dev/null 2>&1; then
		printf '{"action": "add", "identifier": "PREVIEW", "x": "%s", "y": "%s", "width": "%s", "height": "%s", "scaler": "contain", "path": "%s"}\n' "$4" "$5" "$(($2-1))" "$(($3-1))" "$1" > "$FIFO_UEBERZUG"
	else
		mediainfo "$6"
	fi
}

# Note that the cache file name is a function of file information, meaning if
# an image appears in multiple places across the machine, it will not have to
# be regenerated once seen.

case "$(file --dereference --brief --mime-type -- "$1")" in
	image/avif) CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | cut -d' ' -f1)"
		[ ! -f "$CACHE" ] && magick "$1" "$CACHE.jpg"
		image "$CACHE.jpg" "$2" "$3" "$4" "$5" "$1" ;;
	image/vnd.djvu)
		CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | cut -d' ' -f1)"
		[ ! -f "$CACHE" ] && djvused "$1" -e 'select 1; save-page-with /dev/stdout' | magick -density 200 - "$CACHE.jpg" > /dev/null 2>&1
		image "$CACHE.jpg" "$2" "$3" "$4" "$5" "$1" ;;
image/svg+xml)
	CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | cut -d' ' -f1)"
	[ ! -f "$CACHE" ] && inkscape --convert-dpi-method=none -o "$CACHE.png" --export-overwrite -D --export-png-color-mode=RGBA_16 "$1"
	image "$CACHE.png" "$2" "$3" "$4" "$5" "$1"
	;;
  image/x-xcf)
    CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | awk '{print $1}')"
    [ ! -f "$CACHE.jpg" ] && magick "$1[0]" "$CACHE.jpg"
    image "$CACHE.jpg" "$2" "$3" "$4" "$5" "$1"
  ;;
	image/*) image "$1" "$2" "$3" "$4" "$5" "$1" ;;
	text/html) lynx -width="$4" -display_charset=utf-8 -dump "$1" ;;
	text/troff) man ./ "$1" | col -b ;;
	text/* | */xml | application/json | application/x-ndjson) bat -p --theme ansi --terminal-width "$(($4-2))" -f "$1" ;;
	audio/* | application/octet-stream) mediainfo "$1" || exit 1 ;;
	video/* )
		CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | cut -d' ' -f1)"
		[ ! -f "$CACHE" ] && ffmpegthumbnailer -i "$1" -o "$CACHE" -s 0
		image "$CACHE" "$2" "$3" "$4" "$5" "$1"
		;;
	*/pdf)
		CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | cut -d' ' -f1)"
		[ ! -f "$CACHE.jpg" ] && pdftoppm -jpeg -f 1 -singlefile "$1" "$CACHE"
		image "$CACHE.jpg" "$2" "$3" "$4" "$5" "$1"
		;;
	*/epub+zip|*/mobi*)
		CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | cut -d' ' -f1)"
		[ ! -f "$CACHE.jpg" ] && gnome-epub-thumbnailer "$1" "$CACHE.jpg"
		image "$CACHE.jpg" "$2" "$3" "$4" "$5" "$1"
		;;
	application/*zip) atool --list -- "$1" ;;
	*opendocument*) odt2txt "$1" ;;
	application/pgp-encrypted) gpg -d -- "$1" ;;
esac
exit 1

#+end_src
*** terminal/
**** alacritty.nix
#+begin_src nix :mkdirp yes :tangle ./user/app/terminal/alacritty.nix
{ pkgs, lib, ... }:

{
  home.packages = with pkgs; [ alacritty ];
  programs.alacritty = {
    enable = true;
    settings = { window.opacity = lib.mkForce 0.85; };
  };
}
#+end_src
**** kitty.nix
#+begin_src nix :tangle ./user/app/terminal/kitty.nix
{ pkgs, lib, ... }:

{
  home.packages = with pkgs; [ kitty ];
  programs.kitty = {
    enable = true;
    settings = {
      background_opacity = lib.mkForce "0.85";
      modify_font = "cell_width 90%";
    };
  };
}
#+end_src
**** konsole.nix
#+begin_src nix :tangle ./user/app/terminal/konsole.nix
{ pkgs, lib, ... }:

{
  home.packages = with pkgs; [ kdePackages.konsole ];
  programs.kdePackages.konsole.enable = true;
  programs.kdePackages.konsole.settings = {
    window.opacity = lib.mkForce 0.85;
  };
}
#+end_src
**** st.nix
#+begin_src nix :tangle ./user/app/terminal/st.nix
{ pkgs, lib, ... }:

{
  home.packages = with pkgs; [ st ];
  programs.st = {
    enable = true;
    # settings = {
    # };
  };
}

#+end_src
*** vm/vm.nix
#+begin_src nix :mkdirp yes :tangle ./user/app/vm/vm.nix
{ config, pkgs, ... }:

{
  # Various packages related to virtualization, compatibility and sandboxing.
  home.packages = with pkgs; [
    # Virtual Machines and wine
    libvirt
    virt-manager
    qemu
    uefi-run
    lxc
    swtpm
    bottles

    # Filesystems
    dosfstools
  ];

  home.file.".config/libvirt/qemu.conf".text = ''
    nvram = ["/run/libvirt/nix-ovmf/OVMF_CODE.fd:/run/libvirt/nix-ovmf/OVMF_VARS.fd"]
  '';

}
#+end_src
** hardware/
*** bluetooth.nix
#+begin_src nix :mkdirp yes :tangle ./user/hardware/bluetooth.nix
{ pkgs, ... }:

{
  home.packages = with pkgs; [ blueman ];
  services = { blueman-applet.enable = true; };
}
#+end_src
** lang/
*** cc/cc.nix
#+begin_src nix :mkdirp yes :tangle ./user/lang/cc/cc.nix
{ pkgs, ... }:

{
  home.packages = with pkgs; [
    gcc
    gnumake
    cmake
    autoconf
    automake
    libtool
  ];
}
#+end_src
*** lisp/lisp.nix
#+begin_src nix :mkdirp yes :tangle ./user/lang/lisp/lisp.nix
{ pkgs, ... }:

{
  home.packages = with pkgs; [
    rlwrap
    roswell
    # mitscheme
    # chez
    # chicken
    # guile
    # racket
    # fennel
    # janet
  ];
}
#+end_src
*** rust/rust.nix
#+begin_src nix :mkdirp yes :tangle ./user/lang/rust/rust.nix
{ pkgs, ... }:

{
  home.packages = with pkgs;
    [
      rustup
    ];
}
#+end_src
** shell/sh.nix
#+begin_src nix :mkdirp yes :tangle ./user/shell/sh.nix
{ pkgs, ... }:
let
  aliases = {
    g = "git";
    ga = "git add .";
    gc = "git commit -m";
    "..." = "cd ../..";
    "...." = "cd ../../..";
  };
in {
  programs = {
    zsh = {
      enable = true;
      autosuggestion.enable = true;
      syntaxHighlighting.enable = true;
      enableCompletion = true;
      shellAliases = aliases;
      initExtra = ''
        PROMPT=" ◉ %U%F{magenta}%n%f%u@%U%F{blue}%m%f%u:%F{yellow}%~%f
        %F{green}→%f "
        # Disable some features to support TRAMP.
        if [ "$TERM" = dumb ]; then
          unsetopt zle prompt_cr prompt_subst
          unset RPS1 RPROMPT
          PS1='$ '
          PROMPT='$ '
        fi
      '';
    };
    bash = {
      enable = true;
      enableCompletion = true;
      shellAliases = aliases;
    };
    direnv = {
      enable = true;
      enableZshIntegration = true;
      nix-direnv.enable = true;
    };
  };
  home.packages = with pkgs; [
    hyfetch
    lolcat
    cowsay
    sl
    starfetch
    cava
    asciiquarium-transparent
    cmatrix
    ponysay
    terminal-parrot
    vim
    neovim
    killall
    libnotify
    timer
    brightnessctl
    gnugrep
    bat
    fd
    eza
    bottom
    ripgrep
    rsync
    unzip
    bc
    direnv
    nix-direnv
    tldr
    w3m
    pandoc
    hwinfo
    pciutils
    (pkgs.writeShellScriptBin "airplane-mode" ''
      #!/bin/sh
      connectivity="$(nmcli n connectivity)"
      if [ "$connectivity" == "full" ]
      then
          nmcli n off
      else
          nmcli n on
      fi
    '')
  ];
}

#+end_src
** TODO wm/
* To-Do
** TODO better modularization / system profiles that don't repeat themselves
** TODO actual profiles that aren't just everything you need thrown into /work profile
** TODO lf declarative rather than tangling in luke lf config raw via org babel
** TODO telegram
** TODO emacs email dependencies added and configured
** TODO doom install script with my dotfiles
** TODO doom path added to path
** TODO roswell install script
** TODO wallpaper
** TODO opentabletdriver
** TODO ardour / plugins / music
** TODO zfs server / nfs connections
** TODO agenix
** TODO blender
** TODO hard drives / fstab
** TODO impermanence
** TODO literate
** TODO random-splash-image emacs
* References / Credits
- [[https://www.youtube.com/@wilfridtaylor][Wil T]]
- [[https://github.com/librephoenix/nixos-config][librephoenix/nixos-config]]
- [[https://github.com/hlissner/dotfiles][hlissner/dotfiles]]
